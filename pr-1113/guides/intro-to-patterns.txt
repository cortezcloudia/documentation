3:I[78703,[],""]
5:I[53751,[],""]
4:["slug","guides/intro-to-patterns","c"]
0:["jQQkCkI4fsrl1tUSJ-R78",[[["",{"children":["(docs)",{"children":[["slug","guides/intro-to-patterns","c"],{"children":["__PAGE__?{\"slug\":[\"guides\",\"intro-to-patterns\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["(docs)",{"children":[["slug","guides/intro-to-patterns","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(docs)","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$L6",null],null]},["$L7",null],null],[[["$","link","0",{"rel":"stylesheet","href":"/documentation/pr-1113/_next/static/css/4c91e12f3a4fd19a.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/documentation/pr-1113/_next/static/css/315d363b71efb915.css","precedence":"next","crossOrigin":"$undefined"}]],"$L8"]]]]
9:I[97020,["469","static/chunks/469-aa7a20c8420ebdd5.js","193","static/chunks/193-229f839332df14bc.js","322","static/chunks/322-ea12342e7e4c57d0.js","268","static/chunks/268-c6360ac5034417b7.js","367","static/chunks/367-1d9117a68e80ff51.js","185","static/chunks/app/layout-74db0f1b3955c8b1.js"],"ThemeNoFlash"]
a:I[99495,["469","static/chunks/469-aa7a20c8420ebdd5.js","193","static/chunks/193-229f839332df14bc.js","322","static/chunks/322-ea12342e7e4c57d0.js","268","static/chunks/268-c6360ac5034417b7.js","367","static/chunks/367-1d9117a68e80ff51.js","185","static/chunks/app/layout-74db0f1b3955c8b1.js"],"ThemeProvider"]
b:I[65375,["469","static/chunks/469-aa7a20c8420ebdd5.js","193","static/chunks/193-229f839332df14bc.js","322","static/chunks/322-ea12342e7e4c57d0.js","268","static/chunks/268-c6360ac5034417b7.js","367","static/chunks/367-1d9117a68e80ff51.js","185","static/chunks/app/layout-74db0f1b3955c8b1.js"],"TooltipProvider"]
c:I[5612,["469","static/chunks/469-aa7a20c8420ebdd5.js","193","static/chunks/193-229f839332df14bc.js","322","static/chunks/322-ea12342e7e4c57d0.js","268","static/chunks/268-c6360ac5034417b7.js","367","static/chunks/367-1d9117a68e80ff51.js","185","static/chunks/app/layout-74db0f1b3955c8b1.js"],"default"]
d:I[76461,["469","static/chunks/469-aa7a20c8420ebdd5.js","193","static/chunks/193-229f839332df14bc.js","322","static/chunks/322-ea12342e7e4c57d0.js","268","static/chunks/268-c6360ac5034417b7.js","367","static/chunks/367-1d9117a68e80ff51.js","185","static/chunks/app/layout-74db0f1b3955c8b1.js"],"Header"]
e:I[47793,["880","static/chunks/880-af1fb2fa34cabf75.js","601","static/chunks/app/error-f9dc9970263adc5e.js"],"default"]
f:I[34606,["880","static/chunks/880-af1fb2fa34cabf75.js","160","static/chunks/app/not-found-fda96540e84804c2.js"],"Error"]
10:I[5388,["469","static/chunks/469-aa7a20c8420ebdd5.js","193","static/chunks/193-229f839332df14bc.js","322","static/chunks/322-ea12342e7e4c57d0.js","268","static/chunks/268-c6360ac5034417b7.js","367","static/chunks/367-1d9117a68e80ff51.js","185","static/chunks/app/layout-74db0f1b3955c8b1.js"],"AppFooter"]
11:I[6447,["469","static/chunks/469-aa7a20c8420ebdd5.js","880","static/chunks/880-af1fb2fa34cabf75.js","193","static/chunks/193-229f839332df14bc.js","275","static/chunks/275-779b8511fd1c1718.js","268","static/chunks/268-c6360ac5034417b7.js","10","static/chunks/10-3bd23b917e5d8d06.js","529","static/chunks/app/(docs)/layout-010670a815836cd3.js"],"MdTabsGroupContextProvider"]
12:I[55856,["469","static/chunks/469-aa7a20c8420ebdd5.js","880","static/chunks/880-af1fb2fa34cabf75.js","193","static/chunks/193-229f839332df14bc.js","275","static/chunks/275-779b8511fd1c1718.js","268","static/chunks/268-c6360ac5034417b7.js","10","static/chunks/10-3bd23b917e5d8d06.js","529","static/chunks/app/(docs)/layout-010670a815836cd3.js"],"ImageModalProvider"]
13:I[44932,["469","static/chunks/469-aa7a20c8420ebdd5.js","880","static/chunks/880-af1fb2fa34cabf75.js","193","static/chunks/193-229f839332df14bc.js","275","static/chunks/275-779b8511fd1c1718.js","268","static/chunks/268-c6360ac5034417b7.js","10","static/chunks/10-3bd23b917e5d8d06.js","529","static/chunks/app/(docs)/layout-010670a815836cd3.js"],"DocLeftNav"]
14:I[55856,["469","static/chunks/469-aa7a20c8420ebdd5.js","880","static/chunks/880-af1fb2fa34cabf75.js","193","static/chunks/193-229f839332df14bc.js","275","static/chunks/275-779b8511fd1c1718.js","268","static/chunks/268-c6360ac5034417b7.js","10","static/chunks/10-3bd23b917e5d8d06.js","529","static/chunks/app/(docs)/layout-010670a815836cd3.js"],"ImageModal"]
7:["$","html",null,{"lang":"en","suppressHydrationWarning":true,"className":"__variable_955f10 __variable_b61319 font-sans","children":["$","body",null,{"children":[["$","$L9",null,{}],["$","$La",null,{"cookieThemeDomain":"","children":["$","$Lb",null,{"children":["$","$Lc",null,{"children":[["$","$Ld",null,{}],["$","div",null,{"className":"pt-[var(--app-header-height)]","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$e","errorStyles":[],"errorScripts":[],"template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$Lf",null,{"title":"Page not found","description":"Sorry, but the page you were looking for could not be found."}],"notFoundStyles":[],"styles":null}]}],["$","$L10",null,{}]]}]}]}]]}]}]
6:["$","$L11",null,{"children":["$","$L12",null,{"children":[["$","div",null,{"className":"flex relative","children":[["$","$L13",null,{"tocPaths":["/guides","/open-source","/api/migration-guides"]}],["$","div",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(docs)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]]}],["$","$L14",null,{}]]}]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Introduction to Qiskit patterns | IBM Quantum Documentation"}],["$","meta","3",{"name":"description","content":"Qiskit patterns are the broad steps employed when running a domain-specific problem on quantum hardware."}],["$","meta","4",{"property":"og:title","content":"Introduction to Qiskit patterns | IBM Quantum Documentation"}],["$","meta","5",{"property":"og:description","content":"Qiskit patterns are the broad steps employed when running a domain-specific problem on quantum hardware."}],["$","meta","6",{"property":"og:site_name","content":"IBM Quantum Documentation"}],["$","meta","7",{"property":"og:type","content":"website"}],["$","meta","8",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","9",{"name":"twitter:creator","content":"@IBM"}],["$","meta","10",{"name":"twitter:title","content":"Introduction to Qiskit patterns | IBM Quantum Documentation"}],["$","meta","11",{"name":"twitter:description","content":"Qiskit patterns are the broad steps employed when running a domain-specific problem on quantum hardware."}],["$","link","12",{"rel":"icon","href":"/icon.svg"}],["$","meta","13",{"name":"next-size-adjust"}]]
1:null
15:I[65469,["469","static/chunks/469-aa7a20c8420ebdd5.js","880","static/chunks/880-af1fb2fa34cabf75.js","193","static/chunks/193-229f839332df14bc.js","275","static/chunks/275-779b8511fd1c1718.js","322","static/chunks/322-ea12342e7e4c57d0.js","369","static/chunks/app/(docs)/%5B...slug%5D/page-3de0230fd676008e.js"],""]
16:I[55856,["469","static/chunks/469-aa7a20c8420ebdd5.js","880","static/chunks/880-af1fb2fa34cabf75.js","193","static/chunks/193-229f839332df14bc.js","275","static/chunks/275-779b8511fd1c1718.js","268","static/chunks/268-c6360ac5034417b7.js","10","static/chunks/10-3bd23b917e5d8d06.js","529","static/chunks/app/(docs)/layout-010670a815836cd3.js"],"Image"]
1b:I[53371,["469","static/chunks/469-aa7a20c8420ebdd5.js","880","static/chunks/880-af1fb2fa34cabf75.js","193","static/chunks/193-229f839332df14bc.js","275","static/chunks/275-779b8511fd1c1718.js","322","static/chunks/322-ea12342e7e4c57d0.js","369","static/chunks/app/(docs)/%5B...slug%5D/page-3de0230fd676008e.js"],"PageToc"]
18:{"d":"M29.25,6.76a6,6,0,0,0-8.5,0l1.42,1.42a4,4,0,1,1,5.67,5.67l-8,8a4,4,0,1,1-5.67-5.66l1.41-1.42-1.41-1.42-1.42,1.42a6,6,0,0,0,0,8.5A6,6,0,0,0,17,25a6,6,0,0,0,4.27-1.76l8-8A6,6,0,0,0,29.25,6.76Z"}
17:["$","path",null,"$18"]
1a:{"d":"M4.19,24.82a4,4,0,0,1,0-5.67l8-8a4,4,0,0,1,5.67,0A3.94,3.94,0,0,1,19,14a4,4,0,0,1-1.17,2.85L15.71,19l1.42,1.42,2.12-2.12a6,6,0,0,0-8.51-8.51l-8,8a6,6,0,0,0,0,8.51A6,6,0,0,0,7,28a6.07,6.07,0,0,0,4.28-1.76L9.86,24.82A4,4,0,0,1,4.19,24.82Z"}
19:["$","path",null,"$1a"]
2:["$","div",null,{"className":"grid grid-cols-[1fr,auto] relative","children":[["$","main",null,{"id":"main-content","className":"min-h-app mx-16 md:mx-96 lg:mx-[56px] xlg:mx-96 pb-96 pt-0 md:pt-24 xlg:pt-0 max-w-full md:max-w-[800px] overflow-auto","children":["$","div",null,{"className":"prose","children":[["$","h1",null,{"id":"introduction-to-qiskit-patterns","className":"group relative mx-0 scroll-pt-[var(--shell-top-bar-height)] break-words text-fluid-heading-05 text-text-primary","children":["Introduction to Qiskit patterns",["$","a",null,{"title":"Permalink to this headline","children":["$","svg",null,{"focusable":"false","preserveAspectRatio":"xMidYMid meet","fill":"currentColor","width":16,"height":16,"viewBox":"0 0 32 32","aria-hidden":true,"className":"inline","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M29.25,6.76a6,6,0,0,0-8.5,0l1.42,1.42a4,4,0,1,1,5.67,5.67l-8,8a4,4,0,1,1-5.67-5.66l1.41-1.42-1.41-1.42-1.42,1.42a6,6,0,0,0,0,8.5A6,6,0,0,0,17,25a6,6,0,0,0,4.27-1.76l8-8A6,6,0,0,0,29.25,6.76Z"}],["$","path",null,{"d":"M4.19,24.82a4,4,0,0,1,0-5.67l8-8a4,4,0,0,1,5.67,0A3.94,3.94,0,0,1,19,14a4,4,0,0,1-1.17,2.85L15.71,19l1.42,1.42,2.12-2.12a6,6,0,0,0-8.51-8.51l-8,8a6,6,0,0,0,0,8.51A6,6,0,0,0,7,28a6.07,6.07,0,0,0,4.28-1.76L9.86,24.82A4,4,0,0,1,4.19,24.82Z"}],"$undefined"]}],"href":"#introduction-to-qiskit-patterns","className":"text-link-primary no-underline hover:underline bg-transparent inline heading-permalink pl-[8px] top-0 opacity-0 group-hover:opacity-100 transition-[opacity] duration-75 ease-[cubic-bezier(0.2,0,0.38,0.9)]"}]]}],"\n",["$","p",null,{"children":"A Qiskit pattern is a general framework for breaking down domain-specific problems and contextualizing required capabilities in stages. This allows for the seamless composability of new capabilities developed by IBM Quantum™ researchers (and others) and enables a future in which quantum computing tasks are performed by powerful heterogenous (CPU/GPU/QPU) computing infrastructure. Blocks or groups of blocks perform the steps of a pattern, with the Qiskit SDK providing an important foundational layer, supported by other tools or services developed by IBM Quantum or the quantum open-source community. Qiskit patterns allow domain experts to specify a problem and compose the tooling (blocks) that achieves a Qiskit pattern. That pattern can then be executed locally, through cloud services, or deployed with Quantum Serverless.","className":"group paragraph-el text-text-primary mx-0"}],"\n",["$","p",null,{"children":"The four steps of a Qiskit pattern are as follows:","className":"group paragraph-el text-text-primary mx-0"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","$L15",null,{"children":[["$","strong",null,{"children":"Map"}]," problem to quantum circuits and operators"],"href":"/guides/./map-problem-to-circuits","className":"text-link-primary no-underline hover:underline bg-transparent inline"}],"className":"my-12"}],"\n",["$","li",null,{"children":["$","$L15",null,{"children":[["$","strong",null,{"children":"Optimize"}]," for target hardware"],"href":"/guides/./optimize-for-hardware","className":"text-link-primary no-underline hover:underline bg-transparent inline"}],"className":"my-12"}],"\n",["$","li",null,{"children":["$","$L15",null,{"children":[["$","strong",null,{"children":"Execute"}]," on target hardware"],"href":"/guides/./execute-on-hardware","className":"text-link-primary no-underline hover:underline bg-transparent inline"}],"className":"my-12"}],"\n",["$","li",null,{"children":["$","$L15",null,{"children":[["$","strong",null,{"children":"Post-process"}]," results"],"href":"/guides/./post-process-results","className":"text-link-primary no-underline hover:underline bg-transparent inline"}],"className":"my-12"}],"\n"],"className":"list-outside ml-16 px-16 list-disc"}],"\n",["$","$L16",null,{"src":"/documentation/pr-1113/images/qiskit-patterns/patterns.svg","alt":"All Qiskit pattern steps are shown (Map problem, Optimize for hardware, Execute on hardware, and Post-process results). All steps except 'Execute on hardware' use the Qiskit SDK. Optimizing for hardware additionally uses the Qiskit Transpiler Service.  Executing on hardware uses only the Qiskit Runtime Service.","width":"912","height":"340"}],"\n",["$","p",null,{"children":"Each step is detailed in the sections below.","className":"group paragraph-el text-text-primary mx-0"}],"\n",[["$","hr",null,{"className":"mt-48 lg:mt-64 mb-16 md:mb-24 my-16 lg:my-24 border-t border-border-subtle box-content overflow-visible"}],["$","h2",null,{"id":"map-problem-to-quantum-circuits-and-operators","className":"group relative mx-0 scroll-pt-[var(--shell-top-bar-height)] break-words text-fluid-heading-04 text-text-primary","children":["Map problem to quantum circuits and operators",["$","a",null,{"title":"Permalink to this headline","children":["$","svg",null,{"focusable":"false","preserveAspectRatio":"xMidYMid meet","fill":"currentColor","width":16,"height":16,"viewBox":"0 0 32 32","aria-hidden":true,"className":"inline","xmlns":"http://www.w3.org/2000/svg","children":["$17","$19","$undefined"]}],"href":"#map-problem-to-quantum-circuits-and-operators","className":"text-link-primary no-underline hover:underline bg-transparent inline heading-permalink pl-[8px] top-0 opacity-0 group-hover:opacity-100 transition-[opacity] duration-75 ease-[cubic-bezier(0.2,0,0.38,0.9)]"}]]}]],"\n",["$","p",null,{"children":["This step describes how a user starts with a classical problem and figures out how to map it to a quantum computer. For example, in applications such as chemistry and quantum simulation, this step generally involves constructing a quantum circuit representing the Hamiltonian you are attempting to solve. During this step, for certain problems, it might also be desirable to specify the mapping of the problem onto qubits in the heavy-hex (or gross) lattice of IBM;reg; hardware from the outset if the structure of the problem lends itself to optimization earlier. It is also worth considering at this point what the outcome of the particular algorithm will be in preparation for the later execute step - for example, if the desired outcome involves inferring correlation functions using Hadamard tests, you might prepare to use ",["$","code",null,{"children":"Sampler","className":"text-code-02 inline whitespace-nowrap px-4 bg-background border border-transparent group-[.pre-el]:text-code-01 group-[.pre-el]:inline-block group-[.pre-el]:whitespace-pre group-[.pre-el]:p-12 group-[.pre-el]:pr-[50px] group-[.pre-el]:bg-inherit group-[.paragraph-el]:whitespace-normal"}],", whereas specifying observables would use the ",["$","code",null,{"children":"Estimator","className":"text-code-02 inline whitespace-nowrap px-4 bg-background border border-transparent group-[.pre-el]:text-code-01 group-[.pre-el]:inline-block group-[.pre-el]:whitespace-pre group-[.pre-el]:p-12 group-[.pre-el]:pr-[50px] group-[.pre-el]:bg-inherit group-[.paragraph-el]:whitespace-normal"}]," and could provide many error mitigation options."],"className":"group paragraph-el text-text-primary mx-0"}],"\n",["$","p",null,{"children":"The output of this step is normally a collection of circuits or quantum operators that can be optimized for hardware in the next step.","className":"group paragraph-el text-text-primary mx-0"}],"\n",[["$","hr",null,{"className":"mt-48 lg:mt-64 mb-16 md:mb-24 my-16 lg:my-24 border-t border-border-subtle box-content overflow-visible"}],["$","h2",null,{"id":"optimize-for-target-hardware","className":"group relative mx-0 scroll-pt-[var(--shell-top-bar-height)] break-words text-fluid-heading-04 text-text-primary","children":["Optimize for target hardware",["$","a",null,{"title":"Permalink to this headline","children":["$","svg",null,{"focusable":"false","preserveAspectRatio":"xMidYMid meet","fill":"currentColor","width":16,"height":16,"viewBox":"0 0 32 32","aria-hidden":true,"className":"inline","xmlns":"http://www.w3.org/2000/svg","children":["$17","$19","$undefined"]}],"href":"#optimize-for-target-hardware","className":"text-link-primary no-underline hover:underline bg-transparent inline heading-permalink pl-[8px] top-0 opacity-0 group-hover:opacity-100 transition-[opacity] duration-75 ease-[cubic-bezier(0.2,0,0.38,0.9)]"}]]}]],"\n",["$","p",null,{"children":"In this step you take the abstract circuits (or operators) produced from the map step and perform a series of optimizations on them. This can include mapping the route and layout of the circuit to physical qubit hardware, converting to basis gates of the hardware, and reducing the number of operations, all designed to optimize the likelihood of success in the later execute step. At this point you might also wish to test out your circuits with a simulator before executing on real hardware in the next step.","className":"group paragraph-el text-text-primary mx-0"}],"\n",["$","p",null,{"children":"During this step, abstract circuits must be transpiled to Instruction Set Architecture (ISA) circuits. An ISA circuit is one that only consists of gates understood by the target hardware (basis gates), and any multi-qubit gates needed to obey any connectivity constraints (coupling map). Only ISA circuits can be run on IBM hardware using IBM Qiskit Runtime.","className":"group paragraph-el text-text-primary mx-0"}],"\n",[["$","hr",null,{"className":"mt-48 lg:mt-64 mb-16 md:mb-24 my-16 lg:my-24 border-t border-border-subtle box-content overflow-visible"}],["$","h2",null,{"id":"execute-on-target-hardware","className":"group relative mx-0 scroll-pt-[var(--shell-top-bar-height)] break-words text-fluid-heading-04 text-text-primary","children":["Execute on target hardware",["$","a",null,{"title":"Permalink to this headline","children":["$","svg",null,{"focusable":"false","preserveAspectRatio":"xMidYMid meet","fill":"currentColor","width":16,"height":16,"viewBox":"0 0 32 32","aria-hidden":true,"className":"inline","xmlns":"http://www.w3.org/2000/svg","children":["$17","$19","$undefined"]}],"href":"#execute-on-target-hardware","className":"text-link-primary no-underline hover:underline bg-transparent inline heading-permalink pl-[8px] top-0 opacity-0 group-hover:opacity-100 transition-[opacity] duration-75 ease-[cubic-bezier(0.2,0,0.38,0.9)]"}]]}]],"\n",["$","p",null,{"children":"This step involves running your circuits on hardware and produces the outputs of the quantum computation. The ISA circuits produced in the previous step can be executed using either a Sampler or Estimator primitive from Qiskit Runtime, initialized locally on your computer or from a cluster or other heterogeneous compute environment. These can be executed in a Batch, which allows parallel transpilation for classical computational efficiency - or a Session, which allows iterative tasks to be implemented efficiently without queuing delays. During this step, there is also the option to configure certain error suppression and mitigation techniques provided by Qiskit Runtime.","className":"group paragraph-el text-text-primary mx-0"}],"\n",["$","p",null,{"children":"Depending on whether you are using the Sampler or Estimator primitive, the outcome of this step will be different. If using the Sampler, the output will be per-shot measurements in the form of bitstrings. If using the Estimator, the output will be expectation values of observables corresponding to physical quantities or cost functions.","className":"group paragraph-el text-text-primary mx-0"}],"\n",[["$","hr",null,{"className":"mt-48 lg:mt-64 mb-16 md:mb-24 my-16 lg:my-24 border-t border-border-subtle box-content overflow-visible"}],["$","h2",null,{"id":"post-process-results","className":"group relative mx-0 scroll-pt-[var(--shell-top-bar-height)] break-words text-fluid-heading-04 text-text-primary","children":["Post-process results",["$","a",null,{"title":"Permalink to this headline","children":["$","svg",null,{"focusable":"false","preserveAspectRatio":"xMidYMid meet","fill":"currentColor","width":16,"height":16,"viewBox":"0 0 32 32","aria-hidden":true,"className":"inline","xmlns":"http://www.w3.org/2000/svg","children":["$17","$19","$undefined"]}],"href":"#post-process-results","className":"text-link-primary no-underline hover:underline bg-transparent inline heading-permalink pl-[8px] top-0 opacity-0 group-hover:opacity-100 transition-[opacity] duration-75 ease-[cubic-bezier(0.2,0,0.38,0.9)]"}]]}]],"\n",["$","p",null,{"children":"This final step involves stitching the outputs from the prior step back together to obtain the desired result. This can involve a range of classical data-processing steps such as visualizing results, readout error mitigation techniques, marginalizing quasi-probability distributions to ascertain results on smaller sets of qubits, or post-selection on inherent properties of the problem, such as total spin, parity, or particle conservation by removing unphysical observables.","className":"group paragraph-el text-text-primary mx-0"}],"\n",["$","hr",null,{"className":"my-16 lg:my-24 border-t border-border-subtle box-content overflow-visible"}],"\n",["$","p",null,{"children":"As the field moves from bespoke circuit construction to utility-scale workflows, the flexibility and ease with which Qiskit patterns allow users to compose the different steps of the pattern opens quantum computing to a wide variety of applications and techniques for easy use by quantum computational scientists.","className":"group paragraph-el text-text-primary mx-0"}],"\n",[["$","hr",null,{"className":"mt-48 lg:mt-64 mb-16 md:mb-24 my-16 lg:my-24 border-t border-border-subtle box-content overflow-visible"}],["$","h2",null,{"id":"next-steps","className":"group relative mx-0 scroll-pt-[var(--shell-top-bar-height)] break-words text-fluid-heading-04 text-text-primary","children":["Next steps",["$","a",null,{"title":"Permalink to this headline","children":["$","svg",null,{"focusable":"false","preserveAspectRatio":"xMidYMid meet","fill":"currentColor","width":16,"height":16,"viewBox":"0 0 32 32","aria-hidden":true,"className":"inline","xmlns":"http://www.w3.org/2000/svg","children":["$17","$19","$undefined"]}],"href":"#next-steps","className":"text-link-primary no-underline hover:underline bg-transparent inline heading-permalink pl-[8px] top-0 opacity-0 group-hover:opacity-100 transition-[opacity] duration-75 ease-[cubic-bezier(0.2,0,0.38,0.9)]"}]]}]],"\n",["$","div",null,{"className":"rounded border border-solid border-layer-02 not-prose my-12 lg:my-16","children":[["$","div",null,{"className":"bg-layer-02 text-text-primary font-600 p-12 py-8 flex items-center gap-8","children":[["$","svg",null,{"focusable":"false","preserveAspectRatio":"xMidYMid meet","fill":"currentColor","width":16,"height":16,"viewBox":"0 0 32 32","aria-hidden":true,"className":"text-purple-50","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M11 24H21V26H11zM13 28H19V30H13zM16 2A10 10 0 006 12a9.19 9.19 0 003.46 7.62c1 .93 1.54 1.46 1.54 2.38h2c0-1.84-1.11-2.87-2.19-3.86A7.2 7.2 0 018 12a8 8 0 0116 0 7.2 7.2 0 01-2.82 6.14c-1.07 1-2.18 2-2.18 3.86h2c0-.92.53-1.45 1.54-2.39A9.18 9.18 0 0026 12 10 10 0 0016 2z"}],"$undefined"]}],"Recommendations"]}],["$","div",null,{"className":"px-12 [&>p]:my-12","children":["$","ul",null,{"children":["\n",["$","li",null,{"children":["Explore each step in a Qiskit pattern in more detail, starting with ",["$","$L15",null,{"children":"Map problem to quantum circuits and operators","href":"/guides/./map-problem-to-circuits","className":"text-link-primary no-underline hover:underline bg-transparent inline"}],"."],"className":"my-12"}],"\n",["$","li",null,{"children":["Run a full example of a Qiskit pattern in the ",["$","a",null,{"children":["CHSH Inequality tutorial",["$","span",null,{"className":"sr-only","children":"(opens in a new tab)"}],false],"href":"https://learning.quantum.ibm.com/tutorial/chsh-inequality","className":"text-link-primary no-underline hover:underline bg-transparent inline","target":"_blank"}],"."],"className":"my-12"}],"\n"],"className":"list-outside ml-16 px-16 list-disc"}]}]]}]]}]}],["$","aside",null,{"data-testid":"page-toc","className":"hidden lg:flex flex-col gap-40 w-[184px] xlg:w-[207px] mr-24 xlg:mr-32 sticky top-[var(--app-header-height)] self-start py-24","style":{"marginTop":"40px","maxHeight":"calc(100vh - var(--app-header-height) - 40px)"},"children":["$","$L1b",null,{"headings":[{"depth":1,"value":"Introduction to Qiskit patterns","compiledValue":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    div: \"div\"\n  }, props.components);\n  return _jsx(_components.div, {\n    children: \"Introduction to Qiskit patterns\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","id":"introduction-to-qiskit-patterns"},{"depth":2,"value":"Map problem to quantum circuits and operators","compiledValue":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    div: \"div\"\n  }, props.components);\n  return _jsx(_components.div, {\n    children: \"Map problem to quantum circuits and operators\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","id":"map-problem-to-quantum-circuits-and-operators"},{"depth":2,"value":"Optimize for target hardware","compiledValue":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    div: \"div\"\n  }, props.components);\n  return _jsx(_components.div, {\n    children: \"Optimize for target hardware\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","id":"optimize-for-target-hardware"},{"depth":2,"value":"Execute on target hardware","compiledValue":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    div: \"div\"\n  }, props.components);\n  return _jsx(_components.div, {\n    children: \"Execute on target hardware\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","id":"execute-on-target-hardware"},{"depth":2,"value":"Post-process results","compiledValue":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    div: \"div\"\n  }, props.components);\n  return _jsx(_components.div, {\n    children: \"Post-process results\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","id":"post-process-results"},{"depth":2,"value":"Next steps","compiledValue":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    div: \"div\"\n  }, props.components);\n  return _jsx(_components.div, {\n    children: \"Next steps\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","id":"next-steps"}],"minHeadingLevel":2,"maxHeadingLevel":3}]}]]}]
